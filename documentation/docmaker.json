{
  "version": "2.0.0-beta1",

  "templates": {
    "TODO": "we are not using function templates yet but it might be nice"
  },

  "sections": [
    { "name": "Introduction", "md": "intro" },

    { "name": "Notation", "md": "notation" },

    { "name": "Selectors", "md": "selectors" },

    { "name": "Style", "md": "style" },

    { "name": "Event types", "md": "events" },

    {
      "name": "Core",
      "md": "core/core",

      "sections": [
        { "name": "Initialisation", "md": "core/init" },

        {
          "name": "Graph manipulation",
          "fns": [
            {
              "name": "cy.add",
              "descr": "Add elements to the graph and return them.",
              "formats": [
                { "descr": "Add a specified element to the graph.", "args": [ { "name": "eleObj", "descr": "A plain object that specifies the element." } ] },
                { "descr": "Add the specified elements to the graph.", "args": [ { "name": "eleObjs", "descr": "An array of elements specified by plain objects." } ] },
                { "descr": "Add the specified elements to the graph.", "args": [ { "name": "eles", "descr": "A collection of elements." } ] }
              ],
              "md": "core/add"
            },

            {
              "name": "cy.remove",
              "descr": "Remove elements from the graph and return them.",
              "formats": [
                { "descr": "Remove the specified elements.", "args": [ { "name": "eles", "descr": "A collection of elements to remove." } ] },
                { "descr": "Remove elements in the graph matching the specified selector.", "args": [ { "name": "selector", "descr": "Elements matching this selector are removed." } ] }
              ],
              "md": "core/remove"
            },

            {
              "name": "cy.load",
              "descr": "Load a graph.",
              "formats": [
                { "args": [
                  { "name": "eleObjs", "descr": "An array of plain objects that specify the elements to load." },
                  { "name": "load", "descr": "A callback function called when the graph has loaded.", "optional": true },
                  { "name": "done", "descr": "A callback function called after the graph is loaded and just after the layout finishes.", "optional": true }
                ] }
              ],
              "md": "core/load"
            },

            {
              "name": "cy.collection",
              "descr": "Return a new, empty collection.",
              "md": "core/collection"
            },

            {
              "name": "cy.$",
              "descr": "Get elements in the graph matching a selector or a filter function.",
              "formats": [
                {
                  "name": "cy.$",
                  "descr": "Get elements in the graph matching the specified selector.",
                  "args": [ { "name": "selector", "descr": "The selector the elements should match." } ]
                },

                {
                  "name": "cy.elements",
                  "descr": "Get elements in the graph matching the specified selector.",
                  "args": [ { "name": "selector", "descr": "The selector the elements should match." } ]
                },

                {
                  "name": "cy.nodes",
                  "descr": "Get nodes in the graph matching the specified selector.",
                  "args": [ { "name": "selector", "descr": "The selector the nodes should match." } ]
                },

                {
                  "name": "cy.edges",
                  "descr": "Get edges in the graph matching the specified selector.",
                  "args": [ { "name": "selector", "descr": "The selector the edges should match." } ]
                },

                {
                  "name": "cy.filter",
                  "descr": "Get elements in the graph matching the specified selector.",
                  "args": [ { "name": "selector", "descr": "The selector the elements should match." } ]
                },

                {
                  "name": "cy.filter",
                  "descr": "Get elements in the graph matching the specified selector.",
                  "args": [
                    { 
                      "name": "function(i, ele)", 
                      "descr": "The filter function that returns true for elements that should be returned.",
                      "fields": [
                        { "name": "i", "descr": "The counter used for iteration over the elements in the graph." },
                        { "name": "ele", "descr": "The current element under consideration for filtering." }
                      ]
                    }
                  ]
                }
              ],
              "md": "core/elements"
            }
          ]
        },

        { 
          "name": "Viewport manipulation",

          "fns": [
            {
              "name": "cy.center", 
              "descr": "Pan the graph to the centre of a collection.",
              "formats": [
                { "descr": "Centre on all elements in the graph." },
                { "descr": "Centre on the specified elements.", "args": [ { "name": "eles", "descr": "The collection to centre upon." } ] }
              ],
              "md": "core/center"
            },

            {
              "name": "cy.fit", 
              "descr": "Pan and zooms the graph to fit to a collection.",
              "formats": [
                { "descr": "Fit to all elements in the graph." },
                { "descr": "Fit to the specified elements.", "args": [ { "name": "eles", "descr": "The collection to fit to." } ] }
              ],
              "md": "core/center"
            },

            {
              "name": "cy.reset", 
              "descr": "Reset the graph to the default zoom level and panning position.",
              "formats": [
                { "descr": "Resets the zoom and pan." }
              ],
              "md": "core/reset"
            },

            {
              "name": "cy.pan", 
              "descr": "Get or set the panning position of the graph.",
              "formats": [
                { "descr": "Get the current panning position." },
                { "descr": "Set the current panning position.", "args": [ { "name": "renderedPosition", "descr": "The rendered position to pan the graph to." } ] }
              ],
              "md": "core/pan"
            },

            {
              "name": "cy.panBy", 
              "descr": "Relatively pan the graph by a specified rendered position vector.",
              "formats": [
                { "args": [ { "name": "renderedPosition", "descr": "The rendered position vector to pan the graph by." } ] }
              ],
              "md": "core/panBy"
            },

            {
              "name": "cy.panningEnabled",
              "descr": "Get or set whether panning is enabled.",
              "formats": [
                {
                  "descr": "Get whether panning is enabled."
                },

                {
                  "descr": "Set whether panning is enabled.",
                  "args": [
                    { "name": "bool", "descr": "A truthy value enables panning; a falsey value disables it." }
                  ]
                }
              ]
            },

            {
              "name": "cy.zoom", 
              "descr": "Get or set the zoom level of the graph.",
              "formats": [
                { "descr": "Get the zoom level." },
                { "descr": "Set the zoom level.", "args": [ { "name": "level", "descr": "The zoom level to set." } ] },
                {
                  "descr": "Set the zoom level.",
                  "args": [
                    { 
                      "name": "options",
                      "descr": "The options for zooming.",
                      "fields": [
                        { "name": "level", "descr": "The zoom level to set." },
                        { "name": "position", "descr": "The position about which to zoom." },
                        { "name": "renderedPosition", "descr": "The rendered position about which to zoom." }
                      ]
                    }
                  ]
                }
              ],
              "md": "core/zoom"
            },

            {
              "name": "cy.zoomingEnabled",
              "descr": "Get or set whether zooming is enabled.",
              "formats": [
                {
                  "descr": "Get whether zooming is enabled."
                },

                {
                  "descr": "Set whether zooming is enabled.",
                  "args": [
                    { "name": "bool", "descr": "A truthy value enables zooming; a falsey value disables it." }
                  ]
                }
              ]
            }
          ]

        },

        {
          "name": "Events",

          "fns": [
            {
              "name": "cy.on",
              "descr": "Bind to events that occur in the graph.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "selector", "descr": "A selector to specify elements for which the handler is triggered.", "optional": true },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "selector", "descr": "A selector to specify elements for which the handler is triggered.", "optional": true },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ],
              "md": "core/on"
            },

            {
              "name": "cy.one",
              "descr": "Bind to events that occur in the graph, and trigger the handler only once.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true },
                    { "name": "function(evt)", "descr": "The handler function that is called when one of the specified events occurs.", "fields": [ { "name": "evt", "descr": "The event object." } ] }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions." },
                    { "name": "data", "descr": "A plain object which is passed to the handler in the event object argument.", "optional": true }
                  ]
                }
              ],
              "md": "core/one"
            },

            {
              "name": "cy.off",
              "descr": "Remove event handlers.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names." },
                    { "name": "selector", "descr": "The same selector used to bind to the events.", "optional": true },
                    { "name": "handler", "descr": "A reference to the handler function to remove.", "optional": true }
                  ]
                },

                {
                  "args": [
                    { "name": "eventsMap", "descr": "A map of event names to handler functions to remove." },
                    { "name": "selector", "descr": "The same selector used to bind to the events.", "optional": true }
                  ]
                }
              ],
              "md": "core/off"
            },

            {
              "name": "cy.trigger",
              "descr": "Trigger one or more events.",
              "formats": [
                {
                  "args": [
                    { "name": "events", "descr": "A space separated list of event names to trigger." },
                    { "name": "extraParams", "descr": "An array of additional parameters to pass to the handler.", "optional": true }
                  ]
                }
              ],
              "md": "core/trigger"
            }


          ]
        },

        {
          "name": "Visuals",

          "fns": [
            {
              "name": "cy.layout",
              "descr": "Position elements in the graph with a layout.",
              "formats": [
                {
                  "args": [
                    {
                      "name": "options",
                      "descr": "The layout options."
                    }
                  ]
                }
              ],
              "md": "core/layout"
            },

            {
              "name": "cy.style",
              "descr": "Get the entry point to modify the visual style of the graph after initialisation.",
              "md": "core/style"
            }
          ]
        }


      ]
    },

    {
      "name": "Collection",
      "md": "collection/collection",
      "sections": [
        {
          "name": "Graph manipulation",
          "fns": [
            {
              "name": "eles.remove",
              "descr": "Remove the elements from the graph.",
              "md": "collection/remove"
            },

            {
              "name": "ele.removed",
              "descr": "Get whether the element has been removed from the graph."
            },

            {
              "name": "eles.restore",
              "descr": "Put removed elements back into the graph.",
              "md": "collection/restore"
            }
          ]
        },

        {
          "name": "Data",
          "fns": [
            {
              "name": "eles.data",
              "descr": "Read and write developer-defined data associated with the elements.",
              "formats": [
                {
                  "name": "ele.data",
                  "descr": "Get all data for the element."
                },

                {
                  "name": "ele.data",
                  "descr": "Get a particular data field for the element.",
                  "args": [ { "name": "name", "descr": "The name of the field to get." } ]
                },

                {
                  "name": "ele.data",
                  "descr": "Set a particular data field for the element.",
                  "args": [
                    { "name": "name", "descr": "The name of the field to set." },
                    { "name": "value", "descr": "The value to set for the field." }
                  ]
                },

                {
                  "name": "ele.data",
                  "descr": "Update multiple data fields at once via an object.",
                  "args": [
                    { "name": "obj", "descr": "The object containing name-value pairs to update data fields." }
                  ]
                }
              ],
              "md": "collection/data"
            },

            {
              "name": "eles.removeData",
              "descr": "Remove developer-defined data associated with the elements."
            },

            {
              "name": "ele.id",
              "descr": "A shortcut to get the ID of an element."
            },

            {
              "name": "ele.json",
              "descr": "Get the element's plain JavaScript object representation."
            },

            {
              "name": "ele.group",
              "descr": "Get the group string that defines the type of the element."
            },

            {
              "name": "ele.isNode",
              "descr": "Get whether the element is a node."
            },

            {
              "name": "ele.isEdge",
              "descr": "Get whether the element is an edge."
            }

          ]
        },

        {
          "name": "Metadata",
          "fns": [
            {
              "name": "node.degree",
              "formats": [
                {
                  "name": "node.degree",
                  "descr": "Get the degree of a node."
                },

                {
                  "name": "node.indegree",
                  "descr": "Get the indegree of a node."
                },

                {
                  "name": "node.outdegree",
                  "descr": "Get the outdegree of a node."
                },

                {
                  "name": "nodes.totalDegree",
                  "descr": "Get the total degree of a collection of nodes."
                },

                {
                  "name": "nodes.minDegree",
                  "descr": "Get the minimum degree of the nodes in the collection."
                },

                {
                  "name": "nodes.maxDegree",
                  "descr": "Get the maximum degree of the nodes in the collection."
                },

                {
                  "name": "nodes.minIndegree",
                  "descr": "Get the minimum indegree of the nodes in the collection."
                },

                {
                  "name": "nodes.maxIndegree",
                  "descr": "Get the maximum indegree of the nodes in the collection."
                },

                {
                  "name": "nodes.minOutdegree",
                  "descr": "Get the minimum outdegree of the nodes in the collection."
                },

                {
                  "name": "nodes.maxOutdegree",
                  "descr": "Get the maximum outdegree of the nodes in the collection."
                }
              ],
              "md": "collection/degree"
            }
          ]
        },

        {
          "name": "Position & dimensions",
          "fns": [
            {
              "name": "node.position",
              "descr": "Get or set the position of a node."
            },

            {
              "name": "nodes.positions",
              "descr": "Set the positions of several nodes with a function."
            },

            {
              "name": "node.renderedPosition",
              "descr": "Get or set the rendered position of a node."
            },

            {
              "name": "ele.width",
              "descr": "Get the width of the element.",
              "formats": [
                { "name": "ele.width", "descr": "Get the width of the element." },
                { "name": "ele.outerWidth", "descr": "Get the outer width of the element (width & border)." },
                { "name": "ele.renderedWidth", "descr": "Get the width of the element in rendered dimensions." },
                { "name": "ele.renderedOuterWidth", "descr": "Get the outer width of the element (width & border) in rendered dimensions." }
              ]
            },

            {
              "name": "ele.height",
              "descr": "Get the height of the element.",
              "formats": [
                { "name": "ele.height", "descr": "Get the height of the element." },
                { "name": "ele.outerHeight", "descr": "Get the outer height of the element (height & border)." },
                { "name": "ele.renderedHeight", "descr": "Get the height of the element in rendered dimensions." },
                { "name": "ele.renderedOuterHeight", "descr": "Get the outer height of the element (height & border) in rendered dimensions." }
              ]
            },

            {
              "name": "node.grabbed",
              "descr": "Get whether a node is currently grabbed, meaning the user has hold of the node."
            },

            {
              "name": "node.grabbable",
              "descr": "Get whether the user can grab a node."
            },

            {
              "name": "nodes.grabify",
              "descr": "Allow the user to grab the nodes."
            },

            {
              "name": "nodes.ungrabify",
              "descr": "Disallow the user to grab the nodes."
            },
            
            {
              "name": "node.locked",
              "descr": "Get whether a node is locked, meaning that its position can not be changed."
            },

            {
              "name": "nodes.lock",
              "descr": "Lock the nodes such that their positions can not be changed."
            },

            {
              "name": "nodes.unlock",
              "descr": "Unlock the nodes such that their positions can be changed."
            }

          ]
        },

        {
          "name": "Selection",
          "fns": [
            {
              "name": "ele.selected",
              "descr": "Get whether the element is selected."
            },

            {
              "name": "eles.select",
              "descr": "Make the elements selected."
            },

            {
              "name": "eles.unselect",
              "descr": "Make the elements not selected."
            },

            {
              "name": "ele.selectable",
              "descr": "Get whether the element's selection state is mutable."
            },

            {
              "name": "eles.selectify",
              "descr": "Make the selection states of the elements mutable."
            },

            {
              "name": "eles.unselectify",
              "descr": "Make the selection states of the elements immutable."
            }
          ]
        },

        {
          "name": "Events",
          "fns": [
            {
              "name": "eles.on",
              "descr": "Bind a callback function to specified events that occur on the elements."
            },

            {
              "name": "eles.one",
              "descr": "Bind a callback function that is triggered once per element."
            },
            
            {
              "name": "eles.once",
              "descr": "Bind a callback function that is triggered once per collection."
            },

            {
              "name": "eles.off",
              "descr": "Unbind one or more callback functions on the elements."
            },

            {
              "name": "eles.trigger",
              "descr": "Trigger events on the elements."
            }      
          ]
        },

        {
          "name": "Style",
          "fns": [
            {
              "name": "eles.css",
              "descr": "Get the style of the element, or override the style of the elements."
            },

            {
              "name": "ele.removeCss",
              "descr": "Removes overridden style of the elements."
            },

            {
              "name": "ele.renderedCss",
              "descr": "Get the style of the element in rendered dimensions."
            },

            {
              "name": "eles.show",
              "descr": "Override the style of the elements such that they are visible."
            },

            {
              "name": "eles.hide",
              "descr": "Override the style of the elements such that they are hidden."
            },

            {
              "name": "ele.visible",
              "descr": "Get whether the element is visible.",
              "formats": [
                { "name": "ele.visible", "descr": "Get whether the element is visible." },
                { "name": "ele.hidden", "descr": "Get whether the element is hidden." }
              ]
            },

            {
              "name": "eles.addClass",
              "descr": "Add classes to elements."
            },

            {
              "name": "eles.removeClass",
              "descr": "Remove classes from elements."
            },

            {
              "name": "eles.toggleClass",
              "descr": "Toggle whether the elements have the specified classes."
            },

            {
              "name": "ele.hasClass",
              "descr": "Get whether an element has a particular class."
            }
          ]
        },

        {
          "name": "Animation",
          "fns": [
            {
              "name": "ele.animated",
              "descr": "Get whether the element is currently being animated."
            },

            {
              "name": "ele.animate",
              "descr": "Animate the elements."
            },

            {
              "name": "eles.delay",
              "descr": "Add a delay between animations for the elements."
            },

            {
              "name": "eles.stop",
              "descr": "Stop all animations that are currently running."
            },

            {
              "name": "eles.clearQueue",
              "descr": "Remove all queued animations for the elements."
            }
          ]
        },

        {
          "name": "Comparison",
          "fns": [
            {
              "name": "eles.same",
              "descr": "Determine whether this collection contains exactly the same elements as another collection."
            },

            {
              "name": "eles.anySame",
              "descr": "Determine whether this collection contains any of the same elements as another collection."
            },

            {
              "name": "eles.is",
              "descr": "Determine whether any element in this collection matches a selector."
            },

            {
              "name": "eles.allAre",
              "descr": "Determine whether all elements in the collection match a selector."
            },

            {
              "name": "eles.allAreNeighbors",
              "descr": "Determine whether all elements in the specified collection are in the neighbourhood of the calling collection."
            }
          ]
        },

        {
          "name": "Iteration",
          "fns": [
            {
              "name": "eles.size",
              "descr": "Get the number of elements in the collection."
            },

            {
              "name": "eles.empty",
              "descr": "Get whether the collection is empty, meaning it has no elements.",
              "formats": [
                { "name": "eles.empty", "descr": "Get whether the collection is empty." },
                { "name": "eles.nonempty", "descr": "Get whether the collection is non-empty." }
              ]
            },

            {
              "name": "eles.each",
              "descr": "Iterate over the elements in the collection."
            },

            {
              "name": "eles.eq",
              "descr": "Get an element at a partular index in the collection."
            },

            {
              "name": "eles.slice",
              "descr": "Get a subset of the elements in the collection based on specified indices."
            }
          ]
        },

        {
          "name": "Traversing",
          "fns": [
            {
              "name": "eles.neighborhood"
            },

            {
              "name": "eles.closedNeighborhood"
            },

            {
              "name": "nodes.edgesWith"
            },

            {
              "name": "nodes.edgesTo"
            },

            {
              "name": "edges.connectedNodes"
            },

            {
              "name": "edges.source"
            },

            {
              "name": "edges.target"
            },

            {
              "name": "edges.parallelEdges"
            },

            {
              "name": "edges.codirectedEdges"
            }
          ]
        },

        {
          "name": "Building & filtering",
          "fns": [
            {
              "name": "eles.add"
            },

            {
              "name": "eles.not",
              "descr": "",
              "formats": []
            },

            {
              "name": "eles.intersect",
              "descr": "",
              "formats": []
            },

            {
              "name": "eles.filter",
              "descr": "",
              "formats": [
                {
                  "name": "eles.nodes"
                },

                {
                  "name": "eles.edges"
                }
              ]
            }
            
          ]
        }
      ]
    }

  ]
}